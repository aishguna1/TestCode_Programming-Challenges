
Server Code:



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>

#define MAX_CLIENTS 5
#define PORT 8080


void *clientHandler(void *arg) {
int clientSock = *(int *)arg;
char buffer[1024];
int valread;

while (1) {
valread = read(clientSock, buffer, sizeof(buffer));
if (valread <= 0) {

printf("Client %d disconnected.\n", clientSock);
close(clientSock);
pthread_exit(NULL);
}


if (strcmp(buffer, "ping") == 0) {
printf("Received 'ping' from client %d. Sending 'pong'...\n", clientSock);
send(clientSock, "pong", strlen("pong"), 0);

}
}

int main() {
int serverSock, newSocket;
struct sockaddr_in address;
int addrlen = sizeof(address);
pthread_t threads[MAX_CLIENTS];


if ((serverSock = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
perror("Socket creation failed");
 exit(EXIT_FAILURE);
 }

address.sin_family = AF_INET;
address.sin_addr.s_addr = INADDR_ANY;
address.sin_port = htons(PORT);


if (bind(serverSock, (struct sockaddr *)&address, sizeof(address)) < 0) {
perror("Bind failed");
exit(EXIT_FAILURE);
}


if (listen(serverSock, MAX_CLIENTS) < 0) {
perror("Listen failed");
exit(EXIT_FAILURE);
}

printf("Server is listening on port %d...\n", PORT);

while (1) {

if ((newSocket = accept(serverSock, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
perror("Accept failed");
continue;
}

 printf("New client connected: %d\n", newSocket);


if (pthread_create(&threads[newSocket], NULL, clientHandler, (void *)&newSocket) < 0) {
perror("Thread creation failed");
}
}

return 0;
}

Client Code:


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"
#define PORT 8080

int main() {
int clientSock;
struct sockaddr_in serverAddr;
char buffer[1024] = {0};
int valread;

if ((clientSock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
perror("Socket creation failed");
 exit(EXIT_FAILURE);
}

serverAddr.sin_family = AF_INET;
serverAddr.sin_port = htons(PORT);


if (inet_pton(AF_INET, SERVER_IP, &serverAddr.sin_addr) <= 0) {
perror("Invalid address/ Address not supported");
exit(EXIT_FAILURE);
}


if (connect(clientSock, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {
perror("Connection failed");
exit(EXIT_FAILURE);
}

printf("Connected to the server.\n");

while (1)
 {
 send(clientSock, "ping", strlen("ping"), 0);
 printf("Sent 'ping' to the server.\n");

valread = read(clientSock, buffer, sizeof(buffer));
if (valread <= 0) {

 perror("Server disconnected or error occurred");
close(clientSock);

 exit(EXIT_FAILURE);
}

if (strcmp(buffer, "pong") == 0) {

printf("Received 'pong' from the server.\n");
}


sleep(1);
}
return 0;
}
